import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Generate a sample dataset
np.random.seed(42)
n_samples = 1000

data = {
    'amount': np.random.uniform(1, 5000, n_samples),
    'transactions_per_day': np.random.randint(1, 20, n_samples),
    'account_age_days': np.random.randint(30, 3650, n_samples),
    'is_fraud': np.random.choice([0, 1], size=n_samples, p=[0.95, 0.05])  # 5% fraud cases
}

df = pd.DataFrame(data)

# Extract features and labels
X = df.drop(columns=['is_fraud'])
y = df['is_fraud']

# Standardize numerical features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train a model (experiment with different classifiers)
models = {
    'Logistic Regression': LogisticRegression(),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier()
}

for name, model in models.items():
    print(f"Training {name}...")
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f'{name} Accuracy: {accuracy:.2f}')
    print(classification_report(y_test, y_pred))
    print("-" * 50)
